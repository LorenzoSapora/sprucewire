{"version":3,"file":"spruce-entangle.modern.js","sources":["../src/elEntangle.js","../src/index.js"],"sourcesContent":["export const elEntangle = {\n    alpineEl: null,\n    livewireComponent: null,\n    storeName: null,\n    store: null,\n\n    registerStore(storeName, state) {\n        // Check if store exists\n        this.ensureStoreMissing(storeName)\n\n        // Register store\n        this.createStore(storeName, state)\n\n        // Find Livewire component\n        this.findLivewireComponent()\n        if (this.livewireComponentNotLoaded()) return\n\n        // Loop through state properties\n        Object.entries(state).forEach(([storeProperty, entangleObject]) => {\n            // Check if we are entangling value\n            if (this.isNotEntangleObject(entangleObject)) return\n\n            let livewireProperty = entangleObject.livewireEntangle\n            let isDeferred = entangleObject.isDeferred\n\n            // Set initial value of spruce store property to Livewire properties value if they are different\n            if (this.valuesAreNotEqual(this.getStoreProperty(storeProperty), this.getLivewireProperty(livewireProperty))) {\n                this.setStoreProperty(storeProperty, this.getLivewireProperty(livewireProperty))\n            }\n\n            // Register spruce watcher\n            this.registerSpruceWatcher(storeProperty, livewireProperty, isDeferred)\n\n            // Register livewire watcher\n            this.registerLivewireWatcher(livewireProperty, storeProperty)\n        })\n    },\n\n    loadStore(storeName, state) {\n        // Check if store doesn't exist\n        this.ensureStoreExists(storeName)\n\n        // Find store\n        this.findStore(storeName)\n\n        // Find Livewire component\n        this.findLivewireComponent()\n        if (this.livewireComponentNotLoaded()) return\n\n        // Loop through state properties\n        Object.entries(state).forEach(([storeProperty, entangleObject]) => {\n            // Check if we are entangling value\n            if (this.isNotEntangleObject(entangleObject)) return\n\n            // Check if store property exists\n            this.ensureStorePropertyExists(storeProperty)\n\n            let livewireProperty = entangleObject.livewireEntangle\n            let isDeferred = entangleObject.isDeferred\n\n            // Set initial value of Livewire property to Spruce store properties value if they are different\n            // This ensures that if Livewire has set the property on multiple components to be the same that there isn't a request back to the server\n            if (this.valuesAreNotEqual(this.getStoreProperty(storeProperty), this.getLivewireProperty(livewireProperty))) {\n                this.setLivewireProperty(livewireProperty, this.getStoreProperty(storeProperty), isDeferred)\n            }\n\n            // Register spruce watcher\n            this.registerSpruceWatcher(storeProperty, livewireProperty, isDeferred)\n\n            // Register livewire watcher\n            this.registerLivewireWatcher(livewireProperty, storeProperty)\n        })\n    },\n\n    ensureStoreMissing(storeName) {\n        if (!!Spruce.store(storeName)) {\n            throw new Error('[Spruce Entangle] Spruce store \"' + storeName + '\" is already registered. Use loadStore.')\n        }\n    },\n\n    ensureStoreExists(storeName) {\n        if (!Spruce.store(storeName)) {\n            throw new Error('[Spruce Entangle] Spruce store \"' + storeName + '\" is not registered. Use registerStore.')\n        }\n    },\n\n    createStore(storeName, state) {\n        // Remove any values that are entangle objects from the state before assigning\n        this.store = Spruce.store(storeName, this.clearEntangleValues(state))\n        this.storeName = storeName\n    },\n\n    clearEntangleValues(state) {\n        // Duplicate state and remove any entangle objects and set with null\n        return Object.keys(state).reduce((result, key) => {\n            result[key] = this.isEntangleObject(state[key]) ? null : state[key]\n            return result\n        }, {})\n    },\n\n    findStore(storeName) {\n        this.store = Spruce.store(storeName)\n        this.storeName = storeName\n    },\n\n    findLivewireComponent() {\n        let livewireEl = this.alpineEl.closest('[wire\\\\:id]')\n\n        if (livewireEl && livewireEl.__livewire) {\n            this.livewireComponent = livewireEl.__livewire\n        }\n    },\n\n    livewireComponentNotLoaded() {\n        return !this.livewireComponent\n    },\n\n    isEntangleObject(value) {\n        return value && typeof value === 'object' && value.livewireEntangle\n    },\n\n    isNotEntangleObject(value) {\n        return !this.isEntangleObject(value)\n    },\n\n    ensureStorePropertyExists(property) {\n        if (!this.store[property]) throw new Error('[Spruce Entangle] Spruce store \"' + this.storeName + '\" does not have property \"' + property + '\".')\n    },\n\n    getLivewireProperty(property) {\n        return this.livewireComponent.getPropertyValueIncludingDefers(property)\n    },\n\n    getStoreProperty(property) {\n        return this.store[property]\n    },\n\n    setLivewireProperty(property, value, isDeferred) {\n        // Ensure data is deep cloned when set\n        this.livewireComponent.set(property, this.cloneValue(value), isDeferred)\n    },\n\n    setStoreProperty(property, value) {\n        // Ensure data is deep cloned when set\n        this.store[property] = this.cloneValue(value)\n    },\n\n    cloneValue(value) {\n        // Use stringify and parse as a hack to deep clone\n        return typeof value !== 'undefined' ? JSON.parse(JSON.stringify(value)) : value\n    },\n\n    valuesAreEqual(value1, value2) {\n        // Due to the deep clone using stringify, we need to do the same here to compare.\n        return JSON.stringify(value1) === JSON.stringify(value2)\n    },\n\n    valuesAreNotEqual(value1, value2) {\n        return !this.valuesAreEqual(value1, value2)\n    },\n\n    registerSpruceWatcher(storeProperty, livewireProperty, isDeferred) {\n        Spruce.watch(this.storeName + '.' + storeProperty, (value) => {\n            // Check if new Spruce value and Livewire are the same and if so, then return to prevent a circular dependancy with other watcher.\n            if (this.valuesAreEqual(value, this.getLivewireProperty(livewireProperty))) return\n\n            //Update Livewire property\n            this.setLivewireProperty(livewireProperty, value, isDeferred)\n        })\n    },\n\n    registerLivewireWatcher(livewireProperty, storeProperty) {\n        this.livewireComponent.watch(livewireProperty, (value) => {\n            // Check if Spruce and new Livewire value are the same and if so, then return to prevent a circular dependancy with other watcher.\n            if (this.valuesAreEqual(value, this.getStoreProperty(storeProperty))) return\n\n            // Update Spruce store property\n            this.setStoreProperty(storeProperty, value)\n        })\n    },\n}\n","import { elEntangle } from './elEntangle'\n\nconst SpruceEntangle = {\n    start() {\n        console.log('start')\n        this.attach()\n    },\n\n    attach() {\n        this.checkDependencies()\n\n        const self = this\n\n        window.Alpine.addMagicProperty('spruceEntangle', (el) => {\n            console.log('Spruce Entangle')\n\n            return this.getElEntangle(el)\n        })\n\n        window.Alpine.addMagicProperty('entangleProperty', (el) => {\n            return function (name, defer = false) {\n                return {\n                    isDeferred: defer,\n                    livewireEntangle: name,\n                    get defer() {\n                        this.isDeferred = true\n                        return this\n                    },\n                }\n            }\n        })\n    },\n\n    checkDependencies() {\n        if (!window.Alpine) throw new Error('[Spruce Entangle] Alpine must be running.')\n\n        if (!window.Spruce) throw new Error('[Spruce Entangle] Spruce must be running.')\n\n        return true\n    },\n\n    getElEntangle(el) {\n        return Object.assign({}, elEntangle, {\n            alpineEl: el,\n        })\n    },\n\n    registerStore(el, storeName, state) {\n        let elEntangle = this.getElEntangle(el)\n\n        elEntangle.registerStore(storeName, state)\n    },\n}\n\nwindow.SpruceEntangle = SpruceEntangle\n\nconst deferrer =\n    window.deferLoadingAlpine ||\n    function (callback) {\n        callback()\n    }\n\nwindow.deferLoadingAlpine = function (callback) {\n    window.SpruceEntangle.start()\n\n    deferrer(callback)\n}\n\n// export default SpruceEntangle\n"],"names":["elEntangle","alpineEl","livewireComponent","storeName","store","registerStore","state","this","ensureStoreMissing","createStore","findLivewireComponent","livewireComponentNotLoaded","Object","entries","forEach","storeProperty","entangleObject","isNotEntangleObject","livewireProperty","livewireEntangle","isDeferred","valuesAreNotEqual","getStoreProperty","getLivewireProperty","setStoreProperty","registerSpruceWatcher","registerLivewireWatcher","loadStore","ensureStoreExists","findStore","ensureStorePropertyExists","setLivewireProperty","Spruce","Error","clearEntangleValues","keys","reduce","result","key","isEntangleObject","livewireEl","closest","__livewire","value","property","getPropertyValueIncludingDefers","set","cloneValue","JSON","parse","stringify","valuesAreEqual","value1","value2","watch","SpruceEntangle","start","console","log","attach","checkDependencies","window","Alpine","addMagicProperty","el","getElEntangle","name","defer","assign","deferrer","deferLoadingAlpine","callback"],"mappings":"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"}