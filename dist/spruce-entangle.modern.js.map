{"version":3,"file":"spruce-entangle.modern.js","sources":["../src/elEntangle.js","../src/index.js"],"sourcesContent":["export const elEntangle = {\n    alpineEl: null,\n\n    loadStore(storeName, state) {\n        // Check if store doesn't exist\n        console.log('Check Does Not Exist', Spruce.store(storeName), !!Spruce.store(storeName))\n        if (!Spruce.store(storeName)) {\n            throw new Error('[Spruce Entangle] Spruce store \"' + storeName + '\" is not registered. Use registerStore.')\n            return\n        }\n\n        // Find Livewire component\n        console.log('Find Livewire Component')\n        let livewireEl = this.alpineEl.closest('[wire\\\\:id]')\n\n        if (!livewireEl || !livewireEl.__livewire) return\n        console.log('Livewire Component Found')\n\n        // Loop through state properties\n        Object.entries(state).forEach(([propertyName, value]) => {\n            console.log('Loop Store', propertyName, value)\n\n            // Check if store property exists\n            if (!Spruce.store(storeName)[propertyName]) throw new Error('[Spruce Entangle] Spruce store \"' + storeName + '\" does not have property \"' + propertyName + '\".')\n\n            // Check if we are entangling value\n            if (!value || typeof value !== 'object' || !value.livewireEntangle) return\n            console.log('Property', propertyName, value)\n\n            let livewireProperty = value.livewireEntangle\n            let isDeferred = value.isDeferred\n            let livewireComponent = livewireEl.__livewire\n\n            // Set initial value of Livewire property to Spruce store properties value if they are different\n            console.log('Spruce Property Value', JSON.parse(JSON.stringify(Spruce.store(storeName)[propertyName])))\n            // This ensures that if Livewire has set the property on multiple components to be the same that there isn't a request back to the server\n            if (JSON.stringify(Spruce.store(storeName)[propertyName]) !== JSON.stringify(livewireEl.__livewire.getPropertyValueIncludingDefers(livewireProperty))) {\n                livewireComponent.set(livewireProperty, JSON.parse(JSON.stringify(Spruce.store(storeName)[propertyName])), isDeferred)\n            }\n            console.log('Property Value', livewireEl.__livewire.getPropertyValueIncludingDefers(livewireProperty))\n\n            // Register spruce watcher\n            Spruce.watch(storeName + '.' + propertyName, (value) => {\n                console.log('Spruce Watcher', value)\n\n                // Check if Spruce and Livewire are the same and if so, then return\n                // - This prevents a circular dependancy with the other watcher below.\n                // - Due to the deep clone using stringify, we need to do the same here to compare.\n                if (JSON.stringify(value) === JSON.stringify(livewireEl.__livewire.getPropertyValueIncludingDefers(livewireProperty))) return\n\n                console.log('Spruce Not Equal')\n\n                //Update Livewire property\n                livewireComponent.set(livewireProperty, value, isDeferred)\n            })\n\n            // Register livewire watcher\n            livewireComponent.watch(livewireProperty, (value) => {\n                console.log('Livewire Watcher', value)\n                // Update Spruce store property\n                // Ensure data is deep cloned otherwise Spruce mutates Livewire data\n                Spruce.store(storeName)[propertyName] = typeof value !== 'undefined' ? JSON.parse(JSON.stringify(value)) : value\n            })\n        })\n\n        console.log(Spruce.store(storeName))\n    },\n\n    registerStore(storeName, state) {\n        // Check if store exists\n        console.log('Check Exists', Spruce.store(storeName), !!Spruce.store(storeName))\n        if (Spruce.store(storeName)) {\n            throw new Error('[Spruce Entangle] Spruce store \"' + storeName + '\" is already registered. Use loadStore.')\n            return\n        }\n\n        // Register store\n        console.log('Register Store', storeName, state)\n        Spruce.store(storeName, state)\n\n        // Find Livewire component\n        console.log('Find Livewire Component')\n        let livewireEl = this.alpineEl.closest('[wire\\\\:id]')\n\n        if (!livewireEl || !livewireEl.__livewire) return\n        console.log('Livewire Component Found')\n\n        // Loop through store properties\n        Object.entries(Spruce.store(storeName)).forEach(([propertyName, value]) => {\n            // Check if we are entangling value\n            if (!value || typeof value !== 'object' || !value.livewireEntangle) return\n            console.log('Property', propertyName, value)\n\n            let livewireProperty = value.livewireEntangle\n            let isDeferred = value.isDeferred\n            let livewireComponent = livewireEl.__livewire\n\n            // Set initial value of spruce store property to Livewire properties value\n            console.log('Livewire Property Value', JSON.parse(JSON.stringify(livewireEl.__livewire.get(livewireProperty))))\n            Spruce.store(storeName)[propertyName] = JSON.parse(JSON.stringify(livewireEl.__livewire.get(livewireProperty)))\n            console.log('Property Value', Spruce.store(storeName)[propertyName])\n\n            // Register spruce watcher\n            Spruce.watch(storeName + '.' + propertyName, (value) => {\n                console.log('Spruce Watcher', value)\n\n                // Check if Spruce and Livewire are the same and if so, then return\n                // - This prevents a circular dependancy with the other watcher below.\n                // - Due to the deep clone using stringify, we need to do the same here to compare.\n                if (JSON.stringify(value) === JSON.stringify(livewireEl.__livewire.getPropertyValueIncludingDefers(livewireProperty))) return\n\n                console.log('Spruce Not Equal')\n\n                //Update Livewire property\n                livewireComponent.set(livewireProperty, value, isDeferred)\n            })\n\n            // Register livewire watcher\n            livewireComponent.watch(livewireProperty, (value) => {\n                console.log('Livewire Watcher', value)\n                // Update Spruce store property\n                // Ensure data is deep cloned otherwise Spruce mutates Livewire data\n                Spruce.store(storeName)[propertyName] = typeof value !== 'undefined' ? JSON.parse(JSON.stringify(value)) : value\n            })\n        })\n\n        console.log(Spruce.store(storeName))\n    },\n}\n","import { elEntangle } from './elEntangle'\n\nconst SpruceEntangle = {\n    start() {\n        console.log('start')\n        this.attach()\n    },\n\n    attach() {\n        this.checkDependencies()\n\n        const self = this\n\n        window.Alpine.addMagicProperty('spruceEntangle', (el) => {\n            console.log('Spruce Entangle')\n\n            return this.getElEntangle(el)\n        })\n\n        window.Alpine.addMagicProperty('entangleProperty', (el) => {\n            return function (name, defer = false) {\n                return {\n                    isDeferred: defer,\n                    livewireEntangle: name,\n                }\n            }\n        })\n    },\n\n    checkDependencies() {\n        if (!window.Alpine) throw new Error('[Spruce Entangle] Alpine must be running.')\n\n        if (!window.Spruce) throw new Error('[Spruce Entangle] Spruce must be running.')\n\n        return true\n    },\n\n    getElEntangle(el) {\n        return Object.assign({}, elEntangle, {\n            alpineEl: el,\n        })\n    },\n\n    registerStore(el, storeName, state) {\n        let elEntangle = this.getElEntangle(el)\n\n        elEntangle.registerStore(storeName, state)\n    },\n}\n\nwindow.SpruceEntangle = SpruceEntangle\n\nconst deferrer =\n    window.deferLoadingAlpine ||\n    function (callback) {\n        callback()\n    }\n\nwindow.deferLoadingAlpine = function (callback) {\n    window.SpruceEntangle.start()\n\n    deferrer(callback)\n}\n\n// export default SpruceEntangle\n"],"names":["elEntangle","alpineEl","loadStore","storeName","state","console","log","Spruce","store","Error","livewireEl","this","closest","__livewire","Object","entries","forEach","propertyName","value","livewireEntangle","livewireProperty","isDeferred","livewireComponent","JSON","parse","stringify","getPropertyValueIncludingDefers","set","watch","registerStore","get","SpruceEntangle","start","attach","checkDependencies","window","Alpine","addMagicProperty","el","getElEntangle","name","defer","assign","deferrer","deferLoadingAlpine","callback"],"mappings":"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"}