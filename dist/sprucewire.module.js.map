{"version":3,"file":"sprucewire.module.js","sources":["../src/elEntangle.js","../src/index.js"],"sourcesContent":["export const elEntangle = {\n    alpineEl: null,\n    livewireComponent: null,\n    storeName: null,\n    store: null,\n\n    registerStore(storeName, state) {\n        // Check if store exists\n        this.ensureStoreMissing(storeName)\n\n        // Register store\n        this.createStore(storeName, state)\n\n        // Find Livewire component\n        this.findLivewireComponent()\n        if (this.livewireComponentNotLoaded()) return\n\n        // Loop through state properties\n        Object.entries(state).forEach(([storeProperty, entangleObject]) => {\n            // Check if we are entangling value\n            if (this.isNotEntangleObject(entangleObject)) return\n\n            let livewireProperty = entangleObject.livewireEntangle\n            let isDeferred = entangleObject.isDeferred\n\n            // Set initial value of spruce store property to Livewire properties value if they are different\n            if (this.valuesAreNotEqual(this.getStoreProperty(storeProperty), this.getLivewireProperty(livewireProperty))) {\n                this.setStoreProperty(storeProperty, this.getLivewireProperty(livewireProperty))\n            }\n\n            // Register spruce watcher\n            this.registerSpruceWatcher(storeProperty, livewireProperty, isDeferred)\n\n            // Register livewire watcher\n            this.registerLivewireWatcher(livewireProperty, storeProperty)\n        })\n    },\n\n    loadStore(storeName, state) {\n        // Check if store doesn't exist\n        this.ensureStoreExists(storeName)\n\n        // Find store\n        this.findStore(storeName)\n\n        // Find Livewire component\n        this.findLivewireComponent()\n        if (this.livewireComponentNotLoaded()) return\n\n        // Loop through state properties\n        Object.entries(state).forEach(([storeProperty, entangleObject]) => {\n            // Check if we are entangling value\n            if (this.isNotEntangleObject(entangleObject)) return\n\n            // Check if store property exists\n            this.ensureStorePropertyExists(storeProperty)\n\n            let livewireProperty = entangleObject.livewireEntangle\n            let isDeferred = entangleObject.isDeferred\n\n            // Set initial value of Livewire property to Spruce store properties value if they are different\n            // This ensures that if Livewire has set the property on multiple components to be the same that there isn't a request back to the server\n            if (this.valuesAreNotEqual(this.getStoreProperty(storeProperty), this.getLivewireProperty(livewireProperty))) {\n                this.setLivewireProperty(livewireProperty, this.getStoreProperty(storeProperty), isDeferred)\n            }\n\n            // Register spruce watcher\n            this.registerSpruceWatcher(storeProperty, livewireProperty, isDeferred)\n\n            // Register livewire watcher\n            this.registerLivewireWatcher(livewireProperty, storeProperty)\n        })\n    },\n\n    ensureStoreMissing(storeName) {\n        if (!!Spruce.store(storeName)) {\n            throw new Error('[Sprucewire] Spruce store \"' + storeName + '\" is already registered. Use loadStore.')\n        }\n    },\n\n    ensureStoreExists(storeName) {\n        if (!Spruce.store(storeName)) {\n            throw new Error('[Sprucewire] Spruce store \"' + storeName + '\" is not registered. Use registerStore.')\n        }\n    },\n\n    createStore(storeName, state) {\n        // Remove any values that are entangle objects from the state before assigning\n        this.store = Spruce.store(storeName, this.clearEntangleValues(state))\n        this.storeName = storeName\n    },\n\n    clearEntangleValues(state) {\n        // Duplicate state and remove any entangle objects and set with null\n        return Object.keys(state).reduce((result, key) => {\n            result[key] = this.isEntangleObject(state[key]) ? null : state[key]\n            return result\n        }, {})\n    },\n\n    findStore(storeName) {\n        this.store = Spruce.store(storeName)\n        this.storeName = storeName\n    },\n\n    findLivewireComponent() {\n        let livewireEl = this.alpineEl.closest('[wire\\\\:id]')\n\n        if (livewireEl && livewireEl.__livewire) {\n            this.livewireComponent = livewireEl.__livewire\n        }\n    },\n\n    livewireComponentNotLoaded() {\n        return !this.livewireComponent\n    },\n\n    isEntangleObject(value) {\n        return value && typeof value === 'object' && value.livewireEntangle\n    },\n\n    isNotEntangleObject(value) {\n        return !this.isEntangleObject(value)\n    },\n\n    ensureStorePropertyExists(property) {\n        if (!this.store[property]) throw new Error('[Sprucewire] Spruce store \"' + this.storeName + '\" does not have property \"' + property + '\".')\n    },\n\n    getLivewireProperty(property) {\n        return this.livewireComponent.getPropertyValueIncludingDefers(property)\n    },\n\n    getStoreProperty(property) {\n        return this.store[property]\n    },\n\n    setLivewireProperty(property, value, isDeferred) {\n        // Ensure data is deep cloned when set\n        this.livewireComponent.set(property, this.cloneValue(value), isDeferred)\n    },\n\n    setStoreProperty(property, value) {\n        // Ensure data is deep cloned when set\n        this.store[property] = this.cloneValue(value)\n    },\n\n    cloneValue(value) {\n        // Use stringify and parse as a hack to deep clone\n        return typeof value !== 'undefined' ? JSON.parse(JSON.stringify(value)) : value\n    },\n\n    valuesAreEqual(value1, value2) {\n        // Due to the deep clone using stringify, we need to do the same here to compare.\n        return JSON.stringify(value1) === JSON.stringify(value2)\n    },\n\n    valuesAreNotEqual(value1, value2) {\n        return !this.valuesAreEqual(value1, value2)\n    },\n\n    registerSpruceWatcher(storeProperty, livewireProperty, isDeferred) {\n        Spruce.watch(this.storeName + '.' + storeProperty, (value) => {\n            // Check if new Spruce value and Livewire are the same and if so, then return to prevent a circular dependancy with other watcher.\n            if (this.valuesAreEqual(value, this.getLivewireProperty(livewireProperty))) return\n\n            //Update Livewire property\n            this.setLivewireProperty(livewireProperty, value, isDeferred)\n        })\n    },\n\n    registerLivewireWatcher(livewireProperty, storeProperty) {\n        this.livewireComponent.watch(livewireProperty, (value) => {\n            // Check if Spruce and new Livewire value are the same and if so, then return to prevent a circular dependancy with other watcher.\n            if (this.valuesAreEqual(value, this.getStoreProperty(storeProperty))) return\n\n            // Update Spruce store property\n            this.setStoreProperty(storeProperty, value)\n        })\n    },\n}\n","import { elEntangle } from './elEntangle'\n\nconst Sprucewire = {\n    start() {\n        console.log('start')\n        this.attach()\n    },\n\n    attach() {\n        this.checkDependencies()\n\n        const self = this\n\n        window.Alpine.addMagicProperty('sprucewire', (el) => {\n            console.log('Sprucewire')\n\n            return this.getElEntangle(el)\n        })\n\n        window.Alpine.addMagicProperty('entangleProperty', (el) => {\n            return function (name, defer = false) {\n                return {\n                    isDeferred: defer,\n                    livewireEntangle: name,\n                    get defer() {\n                        this.isDeferred = true\n                        return this\n                    },\n                }\n            }\n        })\n    },\n\n    checkDependencies() {\n        if (!window.Alpine) throw new Error('[Sprucewire] Alpine must be running.')\n\n        if (!window.Spruce) throw new Error('[Sprucewire] Spruce must be running.')\n\n        return true\n    },\n\n    getElEntangle(el) {\n        return Object.assign({}, elEntangle, {\n            alpineEl: el,\n        })\n    },\n\n    registerStore(el, storeName, state) {\n        let elEntangle = this.getElEntangle(el)\n\n        elEntangle.registerStore(storeName, state)\n    },\n}\n\nwindow.Sprucewire = Sprucewire\n\nconst deferrer =\n    window.deferLoadingAlpine ||\n    function (callback) {\n        callback()\n    }\n\nwindow.deferLoadingAlpine = function (callback) {\n    window.Sprucewire.start()\n\n    deferrer(callback)\n}\n\n// export default Sprucewire\n"],"names":["elEntangle","alpineEl","livewireComponent","storeName","store","registerStore","state","this","ensureStoreMissing","createStore","findLivewireComponent","livewireComponentNotLoaded","Object","entries","forEach","storeProperty","entangleObject","_this","isNotEntangleObject","livewireProperty","livewireEntangle","isDeferred","valuesAreNotEqual","getStoreProperty","getLivewireProperty","setStoreProperty","registerSpruceWatcher","registerLivewireWatcher","loadStore","ensureStoreExists","findStore","_this2","ensureStorePropertyExists","setLivewireProperty","Spruce","Error","clearEntangleValues","keys","reduce","result","key","_this3","isEntangleObject","livewireEl","closest","__livewire","value","property","getPropertyValueIncludingDefers","set","cloneValue","JSON","parse","stringify","valuesAreEqual","value1","value2","watch","_this4","_this5","Sprucewire","start","console","log","attach","checkDependencies","window","Alpine","addMagicProperty","el","getElEntangle","name","defer","assign","deferrer","deferLoadingAlpine","callback"],"mappings":"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"}