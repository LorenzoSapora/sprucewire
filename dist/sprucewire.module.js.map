{"version":3,"file":"sprucewire.module.js","sources":["../src/elEntangle.js","../src/index.js"],"sourcesContent":["export const elEntangle = {\n    alpineEl: null,\n    livewireComponent: null,\n    storeName: null,\n    store: null,\n\n    registerStore(storeName, state) {\n        // Check if store exists\n        this.ensureStoreMissing(storeName)\n\n        // Register store\n        this.createStore(storeName, state)\n\n        // Find Livewire component\n        this.findLivewireComponent()\n        if (this.livewireComponentNotLoaded()) return\n\n        // Loop through state properties\n        Object.entries(state).forEach(([storeProperty, entangleObject]) => {\n            // Check if we are entangling value\n            if (this.isNotEntangleObject(entangleObject)) return\n\n            let livewireProperty = entangleObject.livewireEntangle\n            let isDeferred = entangleObject.isDeferred\n\n            // Set initial value of spruce store property to Livewire properties value if they are different\n            if (this.valuesAreNotEqual(this.getStoreProperty(storeProperty), this.getLivewireProperty(livewireProperty))) {\n                this.setStoreProperty(storeProperty, this.getLivewireProperty(livewireProperty))\n            }\n\n            // Register spruce watcher\n            this.registerSpruceWatcher(storeProperty, livewireProperty, isDeferred)\n\n            // Register livewire watcher\n            this.registerLivewireWatcher(livewireProperty, storeProperty)\n        })\n    },\n\n    loadStore(storeName, state) {\n        // Check if store doesn't exist\n        this.ensureStoreExists(storeName)\n\n        // Find store\n        this.findStore(storeName)\n\n        // Find Livewire component\n        this.findLivewireComponent()\n        if (this.livewireComponentNotLoaded()) return\n\n        // Loop through state properties\n        Object.entries(state).forEach(([storeProperty, entangleObject]) => {\n            // Check if we are entangling value\n            if (this.isNotEntangleObject(entangleObject)) return\n\n            let livewireProperty = entangleObject.livewireEntangle\n            let isDeferred = entangleObject.isDeferred\n\n            // Set initial property only if they are different\n            if (this.storePropertyExists(storeProperty) && this.valuesAreNotEqual(this.getStoreProperty(storeProperty), this.getLivewireProperty(livewireProperty))) {\n                // Set initial value of Livewire property to Spruce store properties value if store property exists\n                // This ensures that if Livewire has set the property on multiple components to be the same that there isn't a request back to the server\n                this.setLivewireProperty(livewireProperty, this.getStoreProperty(storeProperty), isDeferred)\n            } else {\n                // Set initial value of spruce store property to Livewire properties value if store property does not exist\n                this.setStoreProperty(storeProperty, this.getLivewireProperty(livewireProperty))\n            }\n\n            // Register spruce watcher\n            this.registerSpruceWatcher(storeProperty, livewireProperty, isDeferred)\n\n            // Register livewire watcher\n            this.registerLivewireWatcher(livewireProperty, storeProperty)\n        })\n    },\n\n    entangle(name, defer = false) {\n        return {\n            isDeferred: defer,\n            livewireEntangle: name,\n            get defer() {\n                this.isDeferred = true\n                return this\n            },\n        }\n    },\n\n    ensureStoreMissing(storeName) {\n        if (!!Spruce.store(storeName)) {\n            throw new Error('[Sprucewire] Spruce store \"' + storeName + '\" is already registered. Use loadStore.')\n        }\n    },\n\n    ensureStoreExists(storeName) {\n        if (!Spruce.store(storeName)) {\n            throw new Error('[Sprucewire] Spruce store \"' + storeName + '\" is not registered. Use registerStore.')\n        }\n    },\n\n    createStore(storeName, state) {\n        // Remove any values that are entangle objects from the state before assigning\n        this.store = Spruce.store(storeName, this.clearEntangleValues(state))\n        this.storeName = storeName\n    },\n\n    clearEntangleValues(state) {\n        // Duplicate state and remove any entangle objects and set with null\n        return Object.keys(state).reduce((result, key) => {\n            result[key] = this.isEntangleObject(state[key]) ? null : state[key]\n            return result\n        }, {})\n    },\n\n    findStore(storeName) {\n        this.store = Spruce.store(storeName)\n        this.storeName = storeName\n    },\n\n    findLivewireComponent() {\n        let livewireEl = this.alpineEl.closest('[wire\\\\:id]')\n\n        if (livewireEl && livewireEl.__livewire) {\n            this.livewireComponent = livewireEl.__livewire\n        }\n    },\n\n    livewireComponentNotLoaded() {\n        return !this.livewireComponent\n    },\n\n    isEntangleObject(value) {\n        return value && typeof value === 'object' && value.livewireEntangle\n    },\n\n    isNotEntangleObject(value) {\n        return !this.isEntangleObject(value)\n    },\n\n    storePropertyExists(property) {\n        return !!this.store[property]\n        if (!this.store[property]) throw new Error('[Sprucewire] Spruce store \"' + this.storeName + '\" does not have property \"' + property + '\".')\n    },\n\n    getLivewireProperty(property) {\n        return this.livewireComponent.getPropertyValueIncludingDefers(property)\n    },\n\n    getStoreProperty(property) {\n        let value = this.cloneValue(this.store[property])\n\n        // Unset watchers if they exist to ensure they don't get sent to Livewire\n        if (value) {\n            delete value.__watchers\n        }\n\n        return value\n    },\n\n    setLivewireProperty(property, value, isDeferred) {\n        // Ensure data is deep cloned when set\n        this.livewireComponent.set(property, this.cloneValue(value), isDeferred)\n    },\n\n    setStoreProperty(property, value) {\n        // Ensure data is deep cloned when set\n        this.store[property] = this.cloneValue(value)\n    },\n\n    cloneValue(value) {\n        // Use stringify and parse as a hack to deep clone\n        return typeof value !== 'undefined' ? JSON.parse(JSON.stringify(value)) : value\n    },\n\n    valuesAreEqual(value1, value2) {\n        // Due to the deep clone using stringify, we need to do the same here to compare.\n        return JSON.stringify(value1) === JSON.stringify(value2)\n    },\n\n    valuesAreNotEqual(value1, value2) {\n        return !this.valuesAreEqual(value1, value2)\n    },\n\n    registerSpruceWatcher(storeProperty, livewireProperty, isDeferred) {\n        Spruce.watch(this.storeName + '.' + storeProperty, (value) => {\n            // Check if new Spruce value and Livewire are the same and if so, then return to prevent a circular dependancy with other watcher.\n            if (this.valuesAreEqual(this.getStoreProperty(storeProperty), this.getLivewireProperty(livewireProperty))) return\n\n            //Update Livewire property\n            this.setLivewireProperty(livewireProperty, this.getStoreProperty(storeProperty), isDeferred)\n        })\n    },\n\n    registerLivewireWatcher(livewireProperty, storeProperty) {\n        this.livewireComponent.watch(livewireProperty, (value) => {\n            // Check if Spruce and new Livewire value are the same and if so, then return to prevent a circular dependancy with other watcher.\n            if (this.valuesAreEqual(value, this.getStoreProperty(storeProperty))) return\n\n            // Update Spruce store property\n            this.setStoreProperty(storeProperty, value)\n        })\n    },\n}\n","import { elEntangle } from './elEntangle'\n\nconst Sprucewire = {\n    start() {\n        this.attach()\n    },\n\n    attach() {\n        this.checkDependencies()\n\n        window.Alpine.addMagicProperty('sprucewire', (el) => {\n            return this.getElEntangle(el)\n        })\n    },\n\n    checkDependencies() {\n        if (!window.Alpine) throw new Error('[Sprucewire] Alpine must be running.')\n\n        if (!window.Spruce) throw new Error('[Sprucewire] Spruce must be running.')\n\n        return true\n    },\n\n    getElEntangle(el) {\n        return Object.assign({}, elEntangle, {\n            alpineEl: el,\n        })\n    },\n\n    registerStore(el, storeName, state) {\n        let elEntangle = this.getElEntangle(el)\n\n        elEntangle.registerStore(storeName, state)\n    },\n}\n\nwindow.Sprucewire = Sprucewire\n\nconst deferrer =\n    window.deferLoadingAlpine ||\n    function (callback) {\n        callback()\n    }\n\nwindow.deferLoadingAlpine = function (callback) {\n    window.Sprucewire.start()\n\n    deferrer(callback)\n}\n\nexport default Sprucewire\n"],"names":["elEntangle","alpineEl","livewireComponent","storeName","store","registerStore","state","this","ensureStoreMissing","createStore","findLivewireComponent","livewireComponentNotLoaded","Object","entries","forEach","storeProperty","entangleObject","isNotEntangleObject","livewireProperty","livewireEntangle","isDeferred","valuesAreNotEqual","getStoreProperty","getLivewireProperty","setStoreProperty","registerSpruceWatcher","registerLivewireWatcher","loadStore","ensureStoreExists","findStore","storePropertyExists","setLivewireProperty","entangle","name","defer","Spruce","Error","clearEntangleValues","keys","reduce","result","key","isEntangleObject","livewireEl","closest","__livewire","value","property","getPropertyValueIncludingDefers","cloneValue","__watchers","set","JSON","parse","stringify","valuesAreEqual","value1","value2","watch","Sprucewire","start","attach","checkDependencies","window","Alpine","addMagicProperty","el","getElEntangle","assign","deferrer","deferLoadingAlpine","callback"],"mappings":"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"}